Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpkuzxf0mz.py", line 30, in <module>
    assert parser.contents() == [["bim", "boom", "bam", "bap"],
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp99602e3d.py", line 38, in <module>
    assert next_3[0] == 8
           ^^^^^^^^^^^^^^
AssertionError

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpqrlaoz5e.py", line 90, in <module>
    assert exp == 14
           ^^^^^^^^^
AssertionError

Program start
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program start
Program ended
SUCCESS
 
Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpivmblz21.py", line 61, in <module>
    assert quiz.current_question == 2
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program started
Program end
SUCCESS
 
Program started
Program end
SUCCESS
 
Program started
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpb8l2o7_a.py", line 70, in <module>
    cipher.caesar_cipher(0)
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpb8l2o7_a.py", line 53, in caesar_cipher
    cipher = "".join(zip(alphabet, shifted))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: sequence item 0: expected str instance, tuple found

Program started
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp0umnvcuw.py", line 6, in <module>
    class HTMLElement:
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp0umnvcuw.py", line 7, in HTMLElement
    def __init__(self, name, content: List[Union[str, 'HTMLElement']], attributes: Dict[str, str] = None):
                                                                                   ^^^^
NameError: name 'Dict' is not defined. Did you mean: 'dict'?

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpw4w202du.py", line 58, in <module>
    assert shortest_path1 == {'A': 0, 'B': 1, 'C': 3, 'D': 6}, "Test 1 failed!"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: Test 1 failed!

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpb799ab8v.py", line 173, in <module>
    assert create_rel_diff(b1, a1) == "0<add>bob"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp03tp7vwp.py", line 97, in <module>
    assert set(trainer2.get_lookup_table().keys()) == set([c for c in training_set[:10]])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program started
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp4s911f4d.py", line 82, in <module>
    assert Leaf("hello").tree_filter(contains_x, 0).value == "hello"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program started
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp897x95g6.py", line 3, in <module>
    from z3 import ArithRef, Int, Solver, Distinct, sat, IntVal
ImportError: cannot import name 'ArithRef' from 'z3' (/opt/anaconda3/envs/research/lib/python3.12/site-packages/z3/__init__.py)

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp7ls4g7b8.py", line 23, in <module>
    q=Q2, p=P2), kl_div(q=Q2, p=P2), atol=1e-2)
                 ^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp7ls4g7b8.py", line 7, in kl_div
    q_samples = q.rsample((num_samples,))
                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/research/lib/python3.12/site-packages/torch/distributions/distribution.py", line 172, in rsample
    raise NotImplementedError
NotImplementedError

Program started
Program end
SUCCESS
 /var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpo_5xqazi.py:8: SyntaxWarning: invalid escape sequence '\]'
  if char in "!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~":

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp14zqspbd.py", line 132, in <module>
    assert set(individual) == city_set
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpdoqjk1a3.py", line 154, in <module>
    s.buy_yarn(stock)
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpdoqjk1a3.py", line 71, in buy_yarn
    self.bank.reduce_balance(price)
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpdoqjk1a3.py", line 19, in reduce_balance
    raise ValueError
ValueError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpt2hd7nbs.py", line 73, in <module>
    assert chain.translate_from_list(l1) == [[0.0, 0.5, 0.0, 0.333, 0.0], 
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpt2hd7nbs.py", line 24, in translate_from_list
    k_index = self.nodes.index(k)
              ^^^^^^^^^^^^^^^^
AttributeError: 'set' object has no attribute 'index'

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpub22wbkp.py", line 127, in <module>
    assert diff != mutation_test
           ^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
SUCCESS
 
Program started
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpiindx5u4.py", line 101, in <module>
    assert sorted_dag[0] == n6
           ^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpwhfmeklk.py", line 107, in <module>
    scc = g.strongly_connected_components()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpwhfmeklk.py", line 87, in strongly_connected_components
    list(map(lambda x: x.id, strongly_connected_components[node])))
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: 'Node' object is not iterable

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpryvjtqmm.py", line 81, in <module>
    g.add_edge(Edge(n1, n2, 0))
               ^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpryvjtqmm.py", line 25, in __init__
    assert weight > 0
           ^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpvbwpyuwj.py", line 56, in <module>
    assert "for" not in after_source and "while" not in after_source and "map" not in after_source
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpes3suq8z.py", line 28, in <module>
    assert vowel_count('adspirate meis primaque ab origine mundi') == 15
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpb5llx87l.py", line 49, in <module>
    assert torch.allclose(group.elements(), torch.tensor([0., delta, delta * 2, delta * 3, delta * 4, delta * 5, delta * 6, delta * 7]))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp84detwbb.py", line 177, in <module>
    assert translate_html_to_markdown(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp84detwbb.py", line 105, in translate_html_to_markdown
    return cleanup_newlines('\n'.join(translate_element(element) for element in content))
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: sequence item 0: expected str instance, NoneType found

Program start
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpb28h_4y5.py", line 34, in <module>
    assert merge_sort([]) == []
           ^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpdub3soum.py", line 23, in <module>
    assert max_sublstay_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == (7, 2, 6)
           ^^^^^^^^^^^^^^^^
NameError: name 'max_sublstay_sum' is not defined. Did you mean: 'max_subarray_sum'?

Program started
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpzu68sam9.py", line 31, in <module>
    assert syllable_count('ante mare et terras et quod tegit omnia caelum') == 17
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpnldic56n.py", line 82, in <module>
    assert manager2_mm2 == ["CEO"], f"Test 5 Failed: {manager2_mm2}"
           ^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: Test 5 Failed: []

Program start
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmptsykkv0k.py", line 2, in <module>
    from z3 import Sum, Distinct, Solver, Int, sat
ImportError: cannot import name 'Sum' from 'z3' (/opt/anaconda3/envs/research/lib/python3.12/site-packages/z3/__init__.py)

Program start
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmprvb1cfsb.py", line 271, in <module>
    best_move_x = game.best_move('X', 1)
                  ^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmprvb1cfsb.py", line 175, in best_move
    _, best_column = self.ai(depth, False, player)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmprvb1cfsb.py", line 167, in ai
    score, _ = temp_game.ai(depth - 1, True, player)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmprvb1cfsb.py", line 143, in ai
    return self.score_position(self.is_won(), player), None
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmprvb1cfsb.py", line 131, in score_position
    return self.heuristic(player)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmprvb1cfsb.py", line 87, in heuristic
    score += self.evaluate_window
TypeError: unsupported operand type(s) for +=: 'float' and 'method'

Program started
Program end
SUCCESS
 
Program start
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp1lbr8umo.py", line 205, in <module>
    a_seq = ASeq(CImmExpr(ImmExpr("x", "id")),
            ^^^^
NameError: name 'ASeq' is not defined

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp69j3z03i.py", line 16, in <module>
    assert concatenate_nums("the cat  chased  the mouse") == "the mouse  chased  the cat"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program started
Program ended
SUCCESS
 
Program started
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpux0iljz7.py", line 55, in <module>
    assert abs(v3.cosine_similarity(v4)) < 0.01
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpp0fa9sdc.py", line 36, in <module>
    s.sort(ones)
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpp0fa9sdc.py", line 11, in sort
    self.sort(nums[1:])
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpp0fa9sdc.py", line 12, in sort
    self.insert(nums, 0, nums[0])
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpp0fa9sdc.py", line 21, in insert
    nums[i + 1] = num
    ~~~~^^^^^^^
IndexError: list assignment index out of range

Program start
Program end
 /var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp5ishzc64.py:8: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  positive_data[numeric] = scaler.fit_transform(positive_data[numeric])
/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp5ishzc64.py:9: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  negative_data[numeric] = scaler.transform(negative_data[numeric])
/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp5ishzc64.py:14: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  positive_data[label] = 1
/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp5ishzc64.py:15: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  negative_data[label] = 0
/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp5ishzc64.py:14: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  positive_data[label] = 1
Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp5ishzc64.py", line 49, in <module>
    assert construction_result.values.tolist() == [['Location 1', 3.0, 2.5, 2000.0, 350000.0, 1], ['Location 2', 4.0, 3.0, 2500.0, 500000.0, 1], ['Location 3', 2.0, 1.0, 1500.0, 250000.0, 1], ['Location 4', 5.0, 4.0, 3500.0, 700000.0, 1], ['Location 5', 3.0, 2.0, 1800.0, 400000.0, 1], ['Location 6', 4.0, 3.5, 2800.0, 600000.0, 0], ['Location 7', 2.0, 1.5, 1200.0, 300000.0, 0], ['Location 8', 3.0, 2.0, 2100.0, 450000.0, 0], ['Location 9', 4.0, 3.0, 2200.0, 480000.0, 0], ['Location 10', 3.0, 2.0, 1900.0, 420000.0, 0]]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmplfs32nih.py", line 44, in <module>
    assert np.allclose(
           ^^^^^^^^^^^^
AssertionError

Program started
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpdwp6zfg7.py", line 202, in <module>
    assert player1.found_who_won, "The method who_won did not call against."
           ^^^^^^^^^^^^^^^^^^^^^
AssertionError: The method who_won did not call against.

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpejeh706d.py", line 86, in <module>
    assert j.count_leaves() == 6
           ^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpejeh706d.py", line 26, in count_leaves
    return sum([child.count_leaves() for child in self.children])
                ^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpejeh706d.py", line 26, in count_leaves
    return sum([child.count_leaves() for child in self.children])
                                                  ^^^^^^^^^^^^^
AttributeError: 'Leaf' object has no attribute 'children'

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpsndqgrla.py", line 32, in <module>
    assert run_analysis() == 34
           ^^^^^^^^^^^^^^^^^^^^
AssertionError

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpcct5gdin.py", line 39, in <module>
    assert sum_of_prime_products_in_range(10, 20) == 12900
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'sum_of_prime_products_in_range' is not defined. Did you mean: 'sum_of_prime_products'?

   File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpeu8xg8ny.py", line 79
    Pays the worker, which adds to the worker's money.
                                             ^
SyntaxError: unterminated string literal (detected at line 79)

Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpvvv78p16.py", line 21, in <module>
    assert find_primes(2) == [2]
           ^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp6tyi61zz.py", line 51, in <module>
    assert permutation_equality(find_cycles([5, 4, 7, 3, 1, 2, 8, 6]), [[1, 5], [2, 4, 3, 7, 8, 6]])
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp6tyi61zz.py", line 16, in find_cycles
    current = permutation[current]
              ~~~~~~~~~~~^^^^^^^^^
IndexError: list index out of range

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpjg_nzpzr.py", line 41, in <module>
    assert not permutation_equality([[1], [2], [4], [5]], [[1], [1], [1], [1]])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpq33thb5h.py", line 63, in <module>
    assert a3.buffer == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpt8sz5lsx.py", line 39, in <module>
    assert tracker.get_summary() == "Total steps: 3750, Total distance: 3 km"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp4dkkewp1.py", line 4, in <module>
    from vllm import LLM, SamplingParams
ModuleNotFoundError: No module named 'vllm'

Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpl9fp9qhl.py", line 47, in <module>
    assert cq.is_full() == True, "is_full() should return True when the queue is full"
           ^^^^^^^^^^^^^^^^^^^^
AssertionError: is_full() should return True when the queue is full

Program started
Program ended
SUCCESS
 
   File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpicgy8dha.py", line 96
    def dpll(self) -> Optional[dict
                              ^
SyntaxError: '[' was never closed

   File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpxbr0uhgr.py", line 2
    def visit_FunctionDef(self, node):
IndentationError: unexpected indent


    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)P
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)U
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)C
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)V
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)C
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)A
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)S
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)T
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)A
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node);
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)/
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)O
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)T
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)E
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)T
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)P
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node);
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)b
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)I
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node){
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)}
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)+
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)1
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)F
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)D
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)0
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)A
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)0
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)-
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)1
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)P
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)
Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp2tvy3cya.py", line 73, in <module>
    assert feat.cluster(0.6) == [['Seats', 'Sold Coffee', 'Revenue'], ['Parking'], ['Area'], ['Rating']]
           ^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp2tvy3cya.py", line 21, in cluster
    Z = linkage(squareform(dissimilarity.values), 'complete')
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/research/lib/python3.12/site-packages/scipy/spatial/distance.py", line 2326, in squareform
    is_valid_dm(X, throw=True, name='X')
  File "/opt/anaconda3/envs/research/lib/python3.12/site-packages/scipy/spatial/distance.py", line 2432, in is_valid_dm
    raise ValueError(('Distance matrix \'%s\' must be '
ValueError: Distance matrix 'X' must be symmetric.

Program start
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program start
Program end
SUCCESS
 
Program started
Program end
14.52583904633395
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpk7k_3j43.py", line 13, in <module>
    assert abs(heronArea(3, 4.5, 6) - 6.53) < .01
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp8vshzlar.py", line 53, in <module>
    assert Label("one") != Label("two")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

The process timed out. 
Program start
Program end
SUCCESS
 
Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpygzwfvoq.py", line 75, in <module>
    assert a.estimate_location([b, c, d, e, f, g]) == (3.0, 3.0)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpygzwfvoq.py", line 39, in estimate_location
    return (x_locs[int(len(x_locs) / 2)],
            ~~~~~~^^^^^^^^^^^^^^^^^^^^^^
IndexError: list index out of range

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpqezb_ta9.py", line 27, in <module>
    def acceptsString(dfa: DFA, word: List[Input]) -> bool:
                           ^^^
NameError: name 'DFA' is not defined. Did you mean: 'NFA'?

Program start
Program ended
SUCCESS
 
Program start
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpw_00w2tb.py", line 163, in <module>
    assert game.nash_equilibriums() == [("Y", "B")]
           ^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Game' object has no attribute 'nash_equilibriums'

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpa2kqm7bn.py", line 139, in <module>
    assert torch.equal(result_lhs, expected_output_lhs) and torch.equal(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: __getitem__ did not split and process input/output correctly.

Program started
Program ended
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpszcupp3g.py", line 123, in <module>
    test_put_and_get_primary()
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpszcupp3g.py", line 90, in test_put_and_get_primary
    cache.put("key1", "value1")
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpszcupp3g.py", line 16, in put
    self._track_stats('put', primary_key)
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpszcupp3g.py", line 48, in _track_stats
    self.stats.setdefault('hits', 0)
    ^^^^^^^^^^
AttributeError: 'KeyValueCache' object has no attribute 'stats'

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmplnimxx2l.py", line 38, in <module>
    assert pp.parse([1, 2, "+"]) == 3
           ^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmplnimxx2l.py", line 29, in parse
    result = parseHelp(inputs, [])
             ^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmplnimxx2l.py", line 18, in parseHelp
    stack.insert(0, stack.pop() + stack.pop())
                    ^^^^^^^^^^^
IndexError: pop from empty list

Program started
Program end
SUCCESS
 
   File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpe42zgs5m.py", line 99
    return [self.gradient_descent(test_function), self.newtons_
           ^
SyntaxError: '[' was never closed

Program started
Program end
SUCCESS
 
Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp7afaf4z2.py", line 67, in <module>
    assert Comparators.sort_with_tiebreaker(makeup, Comparators.by_word_count, Comparators.by_num_vowels) == [
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpcqsjehj_.py", line 201, in <module>
    assert g.player1Won()
           ^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpcqsjehj_.py", line 45, in player1Won
    move = strat.returnMove(self.board)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpcqsjehj_.py", line 24, in returnMove
    raise Exception
Exception

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpig9zs6m6.py", line 86, in <module>
    num_steps = integrator_one.determine_num_steps_middle(test_function, 0.0001)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'integrator' object has no attribute 'determine_num_steps_middle'. Did you mean: 'determine_stepsize_middle'?

Program started
Program end
SUCCESS
 
Program started
Program end
SUCCESS
 
   File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpcqwekk97.py", line 88
    result = self.point_addition(result
                                ^
SyntaxError: '(' was never closed

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp05hp0cwm.py", line 63, in <module>
    assert schnorr_protocol(p1,g1,x1,r1,c1)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmp05hp0cwm.py", line 54, in schnorr_protocol
    return verifier_check(p, g, y, t, c, s)
           ^^^^^^^^^^^^^^
NameError: name 'verifier_check' is not defined

   File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpbx8x67wt.py", line 110
    elif scaled ==
                  ^
SyntaxError: invalid syntax

Program started
Program end
SUCCESS
 
Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 144, in <module>
    assert p.parse(["for", "(", ";", "expr", ";", "expr", ")", "other"]) == ParseTree(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 38, in parse
    temp = self.stmt()
           ^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 65, in stmt
    self.optexpr()
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 86, in optexpr
    raise Parser.Malformed
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 139, in <module>
    p.parse(["random", ";"])
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 38, in parse
    temp = self.stmt()
           ^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 76, in stmt
    raise Parser.Malformed
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 133, in <module>
    p.parse(["expr", "if"])
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 38, in parse
    temp = self.stmt()
           ^^^^^^^^^^^
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 54, in stmt
    self.match(";")
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 48, in match
    raise Parser.Malformed
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 127, in <module>
    p.parse(["other", ";"])
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpey8ddjd1.py", line 40, in parse
    raise Parser.Malformed
ValueError: input is not in the language accepted by this grammar

Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpgs0ivtcw.py", line 73, in <module>
    assert False
           ^^^^^
AssertionError

Program start
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmpv05jp27d.py", line 39, in <module>
    'feature1': np.random.rand(100),
                ^^
NameError: name 'np' is not defined

Program start
Program end
SUCCESS
 
Program started
Program end
 Traceback (most recent call last):
  File "/var/folders/rw/s7c9z30x7fj_2gcngv0yhv6w0000gn/T/tmptmrn_ssu.py", line 83, in <module>
    assert quartile([1, 2]) == [[1], [], [2]]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError

301.4190476190476
Number correct:  35 / 105
