
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)P
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)U
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)C
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)V
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)C
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)A
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)S
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)T
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)A
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node);
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)/
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)O
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)T
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)E
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)T
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)P
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node);
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)b
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)I
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)y
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)h
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)"
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node){
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)}
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)+
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)1
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)F
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)D
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)0
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)A
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node),
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)0
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)c
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)v
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)N
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node):
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)l
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node).
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)u
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)s
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)[
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)_
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)f
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)]
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)-
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)=
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)1
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)

    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)p
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)i
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)t
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)(
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)P
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)o
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)g
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)r
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)a
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)m
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node) 
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)n
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)e
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)d
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)'
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node))
    def visit_FunctionDef(self, node):
        if node.name not in self.usages:
            self.usages[node.name] = 0
        self.generic_visit(node)

    def visit_Assign(self, node):
        # this line handles Tuple assignments, but only if the number of
        # targets is equivalent to the number of values
        if len(node.targets) == len(node.value.elts):
            for target, value in zip(node.targets, node.value.elts):
                self.visit_Name(target)
        else:
            self.generic_visit(node)
        self.generic_visit(node)

    def visit_Name(self, node):
        if node.id in self.usages:
            self.usages[node.id] += 1
            self.generic_visit(node)

    def visit_Arguments(self, node):
        # we define usage of arguments, also by name, to avoid issues
        # with arg defaults that are also function definitions
        for arg in node.args:
            if arg.id not in self.usages:
                self.usages[arg.id] = 0
            self.generic_visit(node)